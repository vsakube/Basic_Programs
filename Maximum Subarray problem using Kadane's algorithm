#include <iostream>
#include <climits>
#include <vector>

int maxSubarraySum(int arr[], int n) {
    int maxSum = INT_MIN; // Initialize maxSum as the smallest possible value
    int currentSum = 0;
    int start = 0;
    int end = 0;
    int subarrayStart = 0;
    int subarrayEnd = 0;

    for (int i = 0; i < n; i++) {
        currentSum += arr[i];

        if (currentSum > maxSum) {
            maxSum = currentSum;
            subarrayStart = start;
            subarrayEnd = end;
        }

        if (currentSum < 0) {
            currentSum = 0;
            start = i + 1;
        }

        end = i;
    }

    std::cout << "Maximum sum of a contiguous subarray: " << maxSum << std::endl;

    std::vector<int> subarray;
    for (int i = subarrayStart; i <= subarrayEnd; i++) {
        subarray.push_back(arr[i]);
    }

    return subarray;
}

int main() {
    int arr[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::vector<int> subarray = maxSubarraySum(arr, n);

    std::cout << "Subarray elements: ";
    for (int i = 0; i < subarray.size(); i++) {
        std::cout << subarray[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
