#include <iostream>
#include <vector>
#include <unordered_map>
#include <stack>

using namespace std;

// Graph class
class Graph {
private:
    int numVertices;
    unordered_map<int, vector<int>> adjacencyList;

public:
    Graph(int vertices) : numVertices(vertices) {}

    // Add an edge to the graph
    void addEdge(int u, int v) {
        adjacencyList[u].push_back(v);
    }

    // Depth-First Search without recursion
    void FindAllPaths(int start, int end) {
        unordered_map<int, bool> visited;
        stack<pair<int, vector<int>>> stack;  // Pair of current vertex and the path so far

        stack.push({start, {start}});  // Start with the start vertex and the path containing only start

        while (!stack.empty()) {
            int currentVertex = stack.top().first;
            vector<int> currentPath = stack.top().second;
            stack.pop();

            if (currentVertex == end) {
                // Print the path
                for (int vertex : currentPath) {
                    cout << vertex << " ";
                }
                cout << endl;
            }

            visited[currentVertex] = true;

            for (int adjacent : adjacencyList[currentVertex]) {
                if (!visited[adjacent]) {
                    // Create a new path by extending the current path
                    vector<int> newPath = currentPath;
                    newPath.push_back(adjacent);

                    stack.push({adjacent, newPath});
                }
            }
        }
    }
};

// Test the graph implementation
int main() {
    Graph graph(5);

    graph.addEdge(0, 1);
    graph.addEdge(0, 4);
    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 3);
    graph.addEdge(3, 4);

    int start = 0;
    int end = 4;

    cout << "All paths between " << start << " and " << end << " are:" << endl;
    graph.FindAllPaths(start, end);

    return 0;
}
